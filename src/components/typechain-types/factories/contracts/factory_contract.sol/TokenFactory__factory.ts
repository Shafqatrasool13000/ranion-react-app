/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenFactory,
  TokenFactoryInterface,
} from "../../../contracts/factory_contract.sol/TokenFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_NFTaddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "ownerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "NftCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
      {
        internalType: "uint96",
        name: "_royaltyFeeInBips",
        type: "uint96",
      },
    ],
    name: "createNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "deployedNftTokens",
    outputs: [
      {
        internalType: "contract NftToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "superNftTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200100638038062001006833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001fc565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001e2565b92915050565b6000602082840312156200019557600080fd5b6000620001a5848285016200016b565b91505092915050565b6000620001bb82620001c2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001ed81620001ae565b8114620001f957600080fd5b50565b610dfa806200020c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063c6e16d8f1461008f578063c6e386fa146100bf578063cab3d355146100dd578063f2fde38b146100f9575b600080fd5b61006f610115565b005b610079610129565b604051610086919061098d565b60405180910390f35b6100a960048036038101906100a49190610886565b610152565b6040516100b69190610a63565b60405180910390f35b6100c7610191565b6040516100d4919061098d565b60405180910390f35b6100f760048036038101906100f291906107db565b6101b7565b005b610113600480360381019061010e91906107b2565b610323565b005b61011d6103a7565b6101276000610425565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6004818154811061016257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006101e4600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104e9565b905060008190508073ffffffffffffffffffffffffffffffffffffffff1663fcf9332d333389898989306040518863ffffffff1660e01b815260040161023097969594939291906109a8565b600060405180830381600087803b15801561024a57600080fd5b505af115801561025e573d6000803e3d6000fd5b505050506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102cf82336105be565b7f4419c05c84e3cb8de84726cdaeba72711dd2766f53ebd2ce4da55f87ab5e12e8823360016004805490506103049190610b50565b60405161031393929190610a2c565b60405180910390a1505050505050565b61032b6103a7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561039b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039290610a7e565b60405180910390fd5b6103a481610425565b50565b6103af610703565b73ffffffffffffffffffffffffffffffffffffffff166103cd610129565b73ffffffffffffffffffffffffffffffffffffffff1614610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041a90610abe565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090610a9e565b60405180910390fd5b919050565b60018081600181540180825580915050039060005260206000200160009054906101000a9050506000600180805490506105f89190610b50565b90508260018281548110610635577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600033905090565b600061071e61071984610b03565b610ade565b90508281526020810184848401111561073657600080fd5b610741848285610bfc565b509392505050565b60008135905061075881610d7f565b92915050565b600082601f83011261076f57600080fd5b813561077f84826020860161070b565b91505092915050565b60008135905061079781610d96565b92915050565b6000813590506107ac81610dad565b92915050565b6000602082840312156107c457600080fd5b60006107d284828501610749565b91505092915050565b600080600080608085870312156107f157600080fd5b600085013567ffffffffffffffff81111561080b57600080fd5b6108178782880161075e565b945050602085013567ffffffffffffffff81111561083457600080fd5b6108408782880161075e565b935050604085013567ffffffffffffffff81111561085d57600080fd5b6108698782880161075e565b925050606061087a8782880161079d565b91505092959194509250565b60006020828403121561089857600080fd5b60006108a684828501610788565b91505092915050565b6108b881610b84565b82525050565b6108c781610bd8565b82525050565b60006108d882610b34565b6108e28185610b3f565b93506108f2818560208601610c0b565b6108fb81610ccd565b840191505092915050565b6000610913602683610b3f565b915061091e82610cde565b604082019050919050565b6000610936601683610b3f565b915061094182610d2d565b602082019050919050565b6000610959602083610b3f565b915061096482610d56565b602082019050919050565b61097881610bb6565b82525050565b61098781610bc0565b82525050565b60006020820190506109a260008301846108af565b92915050565b600060e0820190506109bd600083018a6108af565b6109ca60208301896108af565b81810360408301526109dc81886108cd565b905081810360608301526109f081876108cd565b90508181036080830152610a0481866108cd565b9050610a1360a083018561097e565b610a2060c08301846108af565b98975050505050505050565b6000606082019050610a4160008301866108af565b610a4e60208301856108af565b610a5b604083018461096f565b949350505050565b6000602082019050610a7860008301846108be565b92915050565b60006020820190508181036000830152610a9781610906565b9050919050565b60006020820190508181036000830152610ab781610929565b9050919050565b60006020820190508181036000830152610ad78161094c565b9050919050565b6000610ae8610af9565b9050610af48282610c3e565b919050565b6000604051905090565b600067ffffffffffffffff821115610b1e57610b1d610c9e565b5b610b2782610ccd565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610b5b82610bb6565b9150610b6683610bb6565b925082821015610b7957610b78610c6f565b5b828203905092915050565b6000610b8f82610b96565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b6000610be382610bea565b9050919050565b6000610bf582610b96565b9050919050565b82818337600083830152505050565b60005b83811015610c29578082015181840152602081019050610c0e565b83811115610c38576000848401525b50505050565b610c4782610ccd565b810181811067ffffffffffffffff82111715610c6657610c65610c9e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d8881610b84565b8114610d9357600080fd5b50565b610d9f81610bb6565b8114610daa57600080fd5b50565b610db681610bc0565b8114610dc157600080fd5b5056fea26469706673582212207d8d07a5b69aea9484bc2a2b962b526915186a02d8e40f225df09a726546a58164736f6c63430008040033";

type TokenFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenFactory__factory extends ContractFactory {
  constructor(...args: TokenFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _NFTaddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenFactory> {
    return super.deploy(_NFTaddress, overrides || {}) as Promise<TokenFactory>;
  }
  override getDeployTransaction(
    _NFTaddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_NFTaddress, overrides || {});
  }
  override attach(address: string): TokenFactory {
    return super.attach(address) as TokenFactory;
  }
  override connect(signer: Signer): TokenFactory__factory {
    return super.connect(signer) as TokenFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenFactoryInterface {
    return new utils.Interface(_abi) as TokenFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenFactory {
    return new Contract(address, _abi, signerOrProvider) as TokenFactory;
  }
}
